import socket
from datetime import datetime

# Expanded list of common ports with corresponding services and vulnerabilities
common_ports = {
    21: ("FTP", ["Anonymous access", "Plain-text passwords"]),
    22: ("SSH", ["Weak algorithms", "Password-based authentication"]),
    23: ("Telnet", ["Unencrypted", "Easily intercepted"]),
    25: ("SMTP", ["Open relay", "Weak authentication"]),
    53: ("DNS", ["Cache poisoning"]),
    69: ("TFTP", ["No authentication", "Data interception"]),
    80: ("HTTP", ["Directory traversal", "Outdated versions"]),
    110: ("POP3", ["Plain-text transmission"]),
    119: ("NNTP", ["Open access", "No encryption"]),
    135: ("MS RPC", ["Remote code execution"]),
    139: ("NetBIOS", ["Sensitive information leakage"]),
    143: ("IMAP", ["Unencrypted connections"]),
    161: ("SNMP", ["Default community strings", "No encryption"]),
    389: ("LDAP", ["Anonymous access", "Weak authentication"]),
    443: ("HTTPS", ["Weak SSL/TLS configurations"]),
    445: ("SMB", ["Exploitation of EternalBlue vulnerability"]),
    465: ("SMTP over SSL", ["Weak encryption", "Open relay"]),
    514: ("Syslog", ["Sensitive information leakage"]),
    543: ("PostgreSQL", ["Weak passwords", "Unsecured access"]),
    631: ("IPP", ["Printer vulnerabilities"]),
    993: ("IMAPS", ["Weak encryption"]),
    995: ("POP3S", ["Weak encryption"]),
    1433: ("MSSQL", ["Weak passwords", "Remote access"]),
    1521: ("Oracle DB", ["Default credentials"]),
    2049: ("NFS", ["Unrestricted access"]),
    3306: ("MySQL", ["Weak passwords", "Remote access"]),
    3389: ("RDP", ["Exposed to brute-force", "Weak encryption"]),
    5432: ("PostgreSQL", ["Weak credentials", "Misconfigured access"]),
    5900: ("VNC", ["Weak passwords", "No encryption"]),
    8080: ("HTTP Proxy", ["Open proxy", "Unsecured access"]),
    8443: ("HTTPS Alt", ["Weak SSL/TLS configurations"]),
    8888: ("HTTP Proxy Alt", ["Open proxy", "Unsecured access"]),
}

# Function to scan ports on the target IP
def port_scan(ip):
    open_ports = []
    print(f"\nStarting scan on {ip} at {datetime.now()}")
    for port in common_ports:
        try:
            # Initialize a socket and attempt connection to the port
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)  # Short timeout for fast scanning
            result = sock.connect_ex((ip, port))  # 0 means the port is open
            if result == 0:
                service, vulnerabilities = common_ports[port]
                print(f"Port {port} ({service}) is open.")
                open_ports.append((port, service, vulnerabilities))
            sock.close()
        except socket.error:
            pass
    return open_ports

# Function to check for known vulnerabilities based on open services
def check_vulnerabilities(open_ports):
    print("\nChecking for known vulnerabilities...\n")
    for port, service, vulnerabilities in open_ports:
        print(f"Potential vulnerabilities for {service} on Port {port}:")
        for vuln in vulnerabilities:
            print(f" - {vuln}")
        print()

# Main execution function
def run_vulnerability_scan():
    target_ip = input("Enter the IP address to scan: ")
    print(f"\n[INFO] Scanning {target_ip} for open ports and known vulnerabilities...")
    
    # Perform the port scan
    open_ports = port_scan(target_ip)
    
    if not open_ports:
        print("No open common ports found.")
    else:
        # Check for known vulnerabilities on detected services
        check_vulnerabilities(open_ports)
    print("\n[INFO] Vulnerability scan complete.")

# Execute the scan immediately
run_vulnerability_scan()
